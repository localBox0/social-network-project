{"version":3,"file":"static/js/270.050a01f5.chunk.js","mappings":"gKACA,G,QAA0B,0BAA1B,EAAkE,8BAAlE,EAAkH,iCAAlH,EAAsK,kCAAtK,EAAiO,wCAAjO,EAAoR,0BAApR,EAAwT,yB,SCSxT,EAJqC,SAACA,GAClC,OAAO,gBAAKC,UAAWC,EAAhB,SAA4BF,EAAMG,W,UCe7C,EARwC,SAACH,GACrC,IAAII,EAAO,YAAcJ,EAAMK,GAC/B,OAAO,iBAAKJ,UAAWC,EAAhB,WACH,gBAAKI,IAAI,sGACT,SAAC,KAAD,CAASC,GAAIH,EAAMH,UAZnB,SAAAO,GAAM,OAAIA,EAAOC,SAAWP,EAA2BA,GAYvD,SAA+CF,EAAMU,W,uCCuBvDC,GAAsBC,EAAAA,EAAAA,GAAiB,KAYvCC,GAAsBC,EAAAA,EAAAA,GAAmD,CAC3EC,KAAM,wBADkBD,EAViF,SAACd,GAC1G,OACI,kBAAMgB,SAAUhB,EAAMiB,aAAtB,WACI,0BAAK,SAACC,EAAA,EAAD,CAAOC,YAAY,oBAAoBT,KAAK,iBACrCU,SAAU,CAACC,EAAAA,EAAUV,GAAsBW,UAAWC,EAAAA,OAClE,0BAAK,qDAWjB,EAzCqC,SAACvB,GAClC,IAAIwB,EAAQxB,EAAMyB,YACdC,EAAkBF,EAAMG,SACvBC,KAAK,SAAAC,GAAC,OAAI,SAAC,EAAD,CAAS1B,QAAS0B,EAAE1B,SAAc0B,EAAExB,OAC/CyB,EAAkBN,EAAMO,QACvBH,KAAK,SAAAI,GAAC,OAAI,SAAC,EAAD,CAAYtB,KAAMsB,EAAEtB,KAAiBL,GAAI2B,EAAE3B,IAAZ2B,EAAE3B,OAKhD,OACI,iBAAKJ,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACK4B,KAEL,gBAAK7B,UAAWC,EAAhB,SACKwB,KAEL,SAACb,EAAD,CAAqBG,SAZT,SAACiB,GACjBjC,EAAMkC,YAAYD,EAAOE,uB,oDCpB7BC,EAA6B,SAACZ,GAAD,MAA0B,CACvDa,OAAQb,EAAMc,KAAKD,S,ICSvB,GAAeE,E,QAAAA,KDHR,SAAgCC,GAWnC,OAHqCC,EAAAA,EAAAA,IACjCL,EAA4B,GADKK,EAPiC,SAACzC,GACnE,IAAKqC,EAAwBrC,EAAxBqC,OAAWK,GAAhB,OAA6B1C,EAA7B,GACA,OAAKqC,GAEE,SAACG,GAAD,UAAsBE,KAFT,SAAC,KAAD,CAAUnC,GAAG,iBCAsBkC,EAAAA,EAAAA,KAPzC,SAACjB,GACnB,MAAO,CACHC,YAAcD,EAAMC,YACpBY,OAAQb,EAAMc,KAAKD,UAKvB,CAACH,YAAaS,EAAAA,EAAAA,cADlB,CACyCC","sources":["webpack://my-app/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogItem/DialogsItem.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__eNol4\",\"dialogsItems\":\"Dialogs_dialogsItems__ZyUny\",\"dialogsItemsBox\":\"Dialogs_dialogsItemsBox__sd82R\",\"dialogsItemsLink\":\"Dialogs_dialogsItemsLink__WzLMS\",\"dialogsItemsActiveLink\":\"Dialogs_dialogsItemsActiveLink__wCdIe\",\"messages\":\"Dialogs_messages__ArDFK\",\"message\":\"Dialogs_message__PSheB\",\"messageWindow\":\"Dialogs_messageWindow__WNI+i\",\"sendMessageButton\":\"Dialogs_sendMessageButton__gdL0I\"};","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\ntype PropsType = {\r\n    message: string\r\n}\r\nconst Message: React.FC<PropsType> = (props) => {\r\n    return <div className={s.message}>{props.message}</div>\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst SelectedLink = () => {\r\n    return (\r\n        select => select.isActive ? s.dialogsItemsActiveLink : s.dialogsItemsLink\r\n    );\r\n}\r\n\r\ntype PropsType = {\r\n    id: number\r\n    name: string\r\n}\r\nconst DialogItem: React.FC<PropsType> = (props) => {\r\n    let path = '/dialogs/' + props.id;\r\n    return <div className={s.dialogsItemsBox}>\r\n        <img src='https://static.probusiness.io/720x480c/n/03/d/38097027_439276526579800_2735888197547458560_n.jpg' />\r\n        <NavLink to={path} className={SelectedLink()}>{props.name}</NavLink>\r\n    </div>\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport Message from \"./Message/Message\";\r\nimport DialogItem from \"./DialogItem/DialogsItem\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\nimport {InitialStateType} from \"../../redux/dialogs-reducer\";\r\n\r\ntype PropsType = {\r\n    dialogsPage: InitialStateType\r\n    sendMessage: (messageText: string) => void\r\n}\r\ntype NewMessageFormValuesType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst Dialogs: React.FC<PropsType> = (props) => {\r\n    let state = props.dialogsPage;\r\n    let messagesElement = state.messages\r\n        .map( m => <Message message={m.message} key={m.id}/>)\r\n    let dialogsElements = state.dialogs\r\n        .map( d => <DialogItem name={d.name} key={d.id} id={d.id}/>)\r\n    let addNewMessage = (values: NewMessageFormValuesType) => {\r\n        props.sendMessage(values.newMessageBody);\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messagesElement}\r\n            </div>\r\n            <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst maxLengthCreator350 = maxLengthCreator(350)\r\ntype FormPropsType = {}\r\nconst AddMessageForm: React.FC<InjectedFormProps<NewMessageFormValuesType, FormPropsType> & FormPropsType> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div><Field placeholder=\"Type your message\" name=\"newMessageBody\"\r\n                        validate={[required, maxLengthCreator350]} component={Textarea}/></div>\r\n            <div><button>Send message</button></div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm<NewMessageFormValuesType, FormPropsType>({\r\n    form: \"dialogAddMessageForm\"\r\n})(AddMessageForm);\r\n\r\n\r\n\r\nexport default Dialogs;","import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\ntype MapPropsType = {\r\n    isAuth: boolean\r\n}\r\ntype DispatchPropsType = {}\r\nexport function withAuthRedirect<WCP> (WrappedComponent: React.ComponentType<WCP>) {\r\n    const RedirectComponent: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to='/login'/>\r\n\r\n        return <WrappedComponent {...restProps as WCP}/>\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect<MapPropsType, DispatchPropsType, WCP, AppStateType>(\r\n        mapStateToPropsForRedirect, {})(RedirectComponent);\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}","import React from 'react';\r\nimport {actions} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        dialogsPage : state.dialogsPage,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport default compose <React.ComponentType>(withAuthRedirect, connect(mapStateToProps,\r\n    {sendMessage: actions.sendMessage}))(Dialogs);"],"names":["props","className","s","message","path","id","src","to","select","isActive","name","maxLengthCreator350","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","validate","required","component","Textarea","state","dialogsPage","messagesElement","messages","map","m","dialogsElements","dialogs","d","values","sendMessage","newMessageBody","mapStateToPropsForRedirect","isAuth","auth","compose","WrappedComponent","connect","restProps","actions","Dialogs"],"sourceRoot":""}